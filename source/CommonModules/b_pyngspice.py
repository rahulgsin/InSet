#!/usr/bin/python
""" This module interfaces the python and ngspice electronics circuit simulator

This module is customary for only Gaussian type input taking following arguments

Mean --- mean of the gaussian distribution

Standard daviation --- standard deviation of the gaussian distribution """

# meta info
__author__ = 'Rajesh Asutkar'
__email__ = 'asutkarrajesh@sggs.ac.in'
__version__ = '-1.0'
__lastchanged__ = '02082015'


import numpy as np
import subprocess
from mpmath import mpf
import matplotlib.pyplot as plt
import sys
import time

data = open("data_in.txt","w")  #open file data_1.txt in write mode

class gaussian():

    """ The customary gaussian class generate gaussian input to the BPM"""

    """ It generates the input text file which will be feeded to NGspice"""
    
    def __init__(self):

        """ It takes input parameters for gaussian function"""
        
        self.mean = float(input("what is mean?"))    #getting mean from user
        self.sd = float(input("what is standard deviation?")) #getting sd from user
        self.no = int(input("How no. of points you want to plot")) #getting no. of points  

    def gauss_fun(self,mean,sd):

        """ This function will generate the gaussian function depending upon the user defined parameters"""
        
        self.a =1/(self.sd*np.sqrt(2*np.pi)) #creating constant multiplier of gaussian function
        self.x = 0
        self.y = np.arange(0,self.no+1)
        self.i = 1
        self.value = 0*np.ones(self.no+1)
        while self.x < self.no:
            self.fun = (self.a)*(np.exp((-(self.x-self.mean)**2)/2*(self.sd)**2)) #gaussian function
            self.x=self.x+1
            #print(self.fun)
            self.value[self.i] = self.fun
            self.i = self.i+1
            with open("data_in.txt","a") as data:
                data.write(str(self.x)+" "+str(self.fun)+"\n")  #writing data to the text file compatible to ngspice
        plt.figure(1)
        plt.subplot(211)
        plt.plot(self.y,self.value,'r--') #plotting input function 
        plt.suptitle('input in pyton')
G = gaussian()
G.gauss_fun(G.mean,G.sd)
from subprocess import call
p=call(["gnome-terminal","--command=ngspice bpm_gauss.cir"])    #this function will invoke NGspice
#p = subprocess.Popen(["ngspice","bpm_gauss.cir"],stdout=subprocess.PIPE,shell=True)
time.sleep(0.5)  #give some time to NGspice

lines = [line.rstrip('\n') for line in open('output.data')] #Getting data generated by NGspice in appropriate format for plotting 
line1 = [line.split() for line in open('output.data',"r")]
xpt = 0*np.ones(len(lines))
ypt = 0*np.ones(len(lines))
for i in range(len(lines)):
    xpt[i] = float(line1[i][0])
    ypt[i] = float(line1[i][1])

plt.subplot(212)
plt.plot(xpt,ypt,'k')
plt.suptitle('output in ngspice')   #plotting output at BPM
plt.show()

