#!/usr/bin/python

""" Generic ngspice Module

The module takes the following arguments

Schematic name --- Name of the NGspice schematic

Input_signal --- Input signal .txt file """

import numpy as np
import subprocess
from mpmath import mpf
import matplotlib.pyplot as plt
import sys
import time
from subprocess import call

class spice():
    
    """ The Generic spice class defines all the generic spice parameters"""
    
    """ spice settings can be stored in an external file and retrieved"""

    def __init__(self,*args,**kwargs):

        """ It takes the specified Schematic file name from the user"""
        
        if len(args) == 0:
            self.parameters = {}
            self.parameters = kwargs
        elif len(args) == 4:
            dir = os.path.dirname(__file__)
            #print (dir)
            rel_dir_name = 'defined_'+__name__ +'s'
            #print (rel_dir_name)
            filename = os.path.join(dir,rel_dir_name,args[0])
            #print (filename)
            if os.path.isfile(filename) == False:
                print('Specified file' +filename+ 'to read the beam parameters does not exist, exiting ...')
                exit()
            else:
                reader = csv.reader(open(filename, 'r'))
                self.parameters = dict(x for x in reader)       
        elif len(args) == 2:
            self.parameters = {}
            self.parameters["Schematic"]= args[0] # .cir extension
            self.parameters["Input_signal"] = args[1] #Input signal
            
        else:
            print('You have the wrong number of arguments, Please use help...')
        
        
        # Check if the some parameters are not defined or assigned to None or have the wrong type
        
        if self.parameters["Schematic"] == None:
            print ("Schematic is not defined")
            print ("Throw exception")
        if type(self.parameters["Schematic"]) != 'str':
           self.parameters["Schematic"] = str( self.parameters["Schematic"])
            
        if self.parameters["Input_signal"] == None:
            print ("input signal is not defined")
            print ("Throw exception")
            
        #self.Schematic = input("schematic")
        # Calculate all the internal parameters
        if self.parameters["Input_signal"] is True:
            Input_para = open("Input_signal.txt","w")
            Input_para.write(".model filesrc filesource (file="+'"'+self.parameters["Input_signal"]+'"'+")")

        
    def NGspice(self):

        """ this function will invoke NGspice and shows the output from NGspice"""
        
        call(["gnome-terminal","--command=ngspice"+" "+ self.parameters["Schematic"]])  #Calls Terminal and Runs NGspice program and specified command
        time.sleep(1)  #give some time to NGspice
        self.mag = [line.rstrip('\n') for line in open('inputdata.data')] #Getting input in appropriate format for plotting 
        self.line1 = [line.split() for line in open('inputdata.data',"r")]
        self.xpt1 = 0*np.ones(len(self.mag))
        self.ypt1 = 0*np.ones(len(self.mag))
        for i in range(len(self.mag)):
            self.xpt1[i] = float(self.line1[i][0])	#collecting input points for plotting
            self.ypt1[i] = float(self.line1[i][1])	#collecting input points for plotting
        plt.figure(1)
        #plt.subplot(211)
        plt.plot(self.xpt1,self.ypt1,'y')
        #plt.xscale('log')
        plt.grid()
        plt.xlabel('time t/sec')
        plt.ylabel('input voltage v')
        
        self.phase = [line.rstrip('\n') for line in open('outputdata.data')] #Getting output generated by NGspice in appropriate format for plotting 
        self.line2 = [line.split() for line in open('outputdata.data',"r")]
        self.xpt2 = 0*np.ones(len(self.phase))
        self.ypt2 = 0*np.ones(len(self.phase))
        for i in range(len(self.mag)):
            self.xpt2[i] = float(self.line2[i][0])	#collecting output points for plotting
            self.ypt2[i] = float(self.line2[i][1])	#collecting output points for plotting
        #plt.subplot(212)
        plt.plot(self.xpt2,self.ypt2,'r')
        #plt.xscale('log')
        plt.grid()
        plt.xlabel('time t/sec')
        plt.ylabel('output voltage v')
        plt.show()

        self.phase = [line.rstrip('\n') for line in open('tempdata.data')] #Getting output generated by NGspice in appropriate format for plotting 
        self.line2 = [line.split() for line in open('tempdata.data',"r")]
        self.xpt2 = 0*np.ones(len(self.phase))
        self.ypt2 = 0*np.ones(len(self.phase))
        for i in range(len(self.mag)):
            self.xpt2[i] = float(self.line2[i][0])	#collecting output points for plotting
            self.ypt2[i] = float(self.line2[i][1])	#collecting output points for plotting
        #plt.subplot(212)
        plt.plot(self.xpt2,self.ypt2)
        #plt.xscale('log')
        plt.grid()
        plt.xlabel('time t/sec')
        plt.ylabel('output voltage v')


        self.phase = [line.rstrip('\n') for line in open('temp1data.data')] #Getting output generated by NGspice in appropriate format for plotting 
        self.line2 = [line.split() for line in open('temp1data.data',"r")]
        self.xpt2 = 0*np.ones(len(self.phase))
        self.ypt2 = 0*np.ones(len(self.phase))
        for i in range(len(self.mag)):
            self.xpt2[i] = float(self.line2[i][0])	#collecting output points for plotting
            self.ypt2[i] = float(self.line2[i][1])	#collecting output points for plotting
        #plt.subplot(212)
        plt.plot(self.xpt2,self.ypt2)
        #plt.xscale('log')
        plt.grid()
        plt.xlabel('time t/sec')
        plt.ylabel('output voltage v')
        #plt.show()
        # Print all the class instance variables
        
        #for key in self.parameters:
        #    print (key, '\t', self.parameters[key])
        
        
    def __repr__(self):
        return "%s(%r)" % (self.__class__, self.__dict__)

dict_tf = {'Schematic':'bpm_gauss.cir', 'Input_signal':'Input_signal.txt'}

tf = spice(**dict_tf)
tf.NGspice()
